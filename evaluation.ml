(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

 open Expr ;;
  
 (* Exception for evaluator runtime, generated by a runtime error in
    the interpreter *)
 exception EvalError of string ;;
 exception IllFormed of string ;;
   
 (* Exception for evaluator runtime, generated by an explicit `raise`
    construct in the object language *)
 exception EvalException ;;
 
 (*......................................................................
   Environments and values 
  *)

 module type ENV = 
  sig
     (* the type of environments *)
     type env
      
     (* the type of values (including closures) stored in
        environments *)
     type value =
       | Val of expr
       | Closure of (expr * env)
    
     (* empty () -- Returns an empty environment *)
     val empty : unit -> env
 
     (* close expr env -- Returns a closure for `expr` and its `env` *)
     val close : expr -> env -> value
 
     (* lookup env varid -- Returns the value in the `env` for the
        `varid`, raising an `Eval_error` if not found *)
     val lookup : env -> varid -> value
 
     (* extend env varid loc -- Returns a new environment just like
        `env` except that it maps the variable `varid` to the `value`
        stored at `loc`. This allows later changing the value, an
        ability used in the evaluation of `letrec`. To make good on
        this, extending an environment needs to preserve the previous
        bindings in a physical, not just structural, way. *)
     val extend : env -> varid -> value ref -> env
 
     (* env_to_string env -- Returns a printable string representation
        of environment `env` *)
     val env_to_string : env -> string
                                  
     (* value_to_string ?printenvp value -- Returns a printable string
        representation of a value; the optional flag `printenvp`
        (default: `true`) determines whether to include the environment
        in the string representation when called on a closure *)
     val value_to_string : ?printenvp:bool -> value -> string
   end
 
 module Env : ENV = 
  struct
    type env = (varid * value ref) list
    and value =
      | Val of expr
      | Closure of (expr * env)

    let empty () : env = []

    let close (exp : expr) (env : env) : value =
      Closure (exp, env)

    let lookup (env : env) (varname : varid) : value =
      try 
        !(List.assoc varname env)
      with _ -> 
        raise (IllFormed ("Unbound Variable: " ^ varname))

    let extend (env : env) (varname : varid) (loc : value ref) : env =
      (varname, loc) :: (List.remove_assoc varname env)

    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with 
      | Val exp -> exp_to_concrete_string exp
      | Closure (exp, env) ->  if printenvp then "Val(" ^ exp_to_concrete_string exp ^ env_to_string env ^ ")" 
                               else exp_to_concrete_string exp 
      

    and env_to_string (e : env) : string =
      match e with 
      | [] -> "{}"
      | (var, value) :: tl -> 
        match !value with 
        | Val exp -> ("{" ^ var ^ "->" ^ exp_to_concrete_string exp  ^ "}" ^ env_to_string tl)
        | Closure (exp, env) -> ("{" ^ env_to_string env ^ "|-" ^ exp_to_concrete_string exp ^ "}" ^ env_to_string tl)

        (* value_to_string !ref ^ "} "  env_to_string *)
  end ;;
 

 (*......................................................................
   Evaluation functions
 
   Each of the evaluation functions below evaluates an expression `exp`
   in an environment `env` returning a result of type `value`. We've
   provided an initial implementation for a trivial evaluator, which
   just converts the expression unchanged to a `value` and returns it,
   along with "stub code" for three more evaluators: a substitution
   model evaluator and dynamic and lexical environment model versions.
 
   Each evaluator is of type `expr -> Env.env -> Env.value` for
   consistency, though some of the evaluators don't need an
   environment, and some will only return values that are "bare
   values" (that is, not closures). 
 
   DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
   against our unit tests relies on their having these signatures. If
   you want to implement an extension whose evaluator has a different
   signature, implement it as `eval_e` below.  *)
 
 (* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
    essentially unchanged, just converted to a value for consistency
    with the signature of the evaluators. *)
  
 let eval_t (exp : expr) (_env : Env.env) : Env.value =
   (* coerce the expr, unchanged, into a value *)
   Env.Val exp ;;
 
 (* The SUBSTITUTION MODEL evaluator -- to be completed *)
  let binopeval (op : binop) (v1 : expr) (v2 : expr) : expr =
    match op, v1, v2 with
    | Plus, Num x1, Num x2 -> Num (x1 + x2)
    | Plus, _, _ -> raise (IllFormed "can't add non-integers")
    | Minus, Num x1, Num x2 -> Num (x1 - x2)
    | Minus, _, _ -> raise (IllFormed "can't subtract non-integers")
    | Times, Num x1, Num x2 -> Num (x1 * x2) 
    | Times, _, _ -> raise (IllFormed "can't multiply non-integers")
    | Divide, Num x1, Num x2 -> Num (x1 / x2) 
    | Divide, _, _ -> raise (IllFormed "can't divide non-integers")
    | Equals, Num x1, Num x2 -> Bool (x1 = x2) 
    | Equals, _, _ -> raise (IllFormed "non-integers not equal")
    | LessThan, Num x1, Num x2 -> Bool (x1 < x2) 
    | LessThan, _, _ -> raise (IllFormed "non-integers not less than")
    | GreaterThan, Num x1, Num x2 -> Bool (x1 > x2) 
    | GreaterThan, _, _ -> raise (IllFormed "non-integers not greater than")
    | And, Bool x1, Bool x2 -> Bool (x1 && x2) 
    | And, _, _ -> raise (IllFormed "non-integers not conjoined by and")
    | Or, Bool x1, Bool x2 -> Bool (x1 || x2) 
    | Or, _, _ -> raise (IllFormed "non-integers not conjoined by or");;

  let unopeval (op : unop) (e : expr) : expr = 
    match op, e with
    | Negate, Num x -> Num (~- x)
    | Negate, _ -> raise (IllFormed "can't negate non-integers");;

  let get_expr (v : Env.value) : expr =
    match v with
    | Env.Val exp -> exp
    | Env.Closure (exp, _) -> exp;; 

  let rec eval_s (_exp : expr) (_env : Env.env) : Env.value =
    match _exp with 
    | Var _ -> Env.Val (raise (EvalError "Unbound variable"))
    | Num n -> Env.Val (Num n)
    | Bool b -> Env.Val (Bool b)
    | Unop (unop, ex) -> Env.Val (unopeval unop (get_expr (eval_s ex (Env.empty()))))
    | Binop (binop, ex1, ex2) -> Env.Val (binopeval binop (get_expr 
            (eval_s ex1 (Env.empty()))) (get_expr (eval_s ex2 (Env.empty()))))
    | Conditional (ex1, ex2, ex3) -> if get_expr (eval_s ex1 (Env.empty())) = Bool true 
                                        then eval_s ex2 (Env.empty()) 
                                      else eval_s ex3 (Env.empty())
    | Fun (var, ex) -> Env.Val (Fun (var, ex))
    | Let (var, ex1, ex2) -> 
        let vd = eval_s ex1 (Env.empty()) in 
        eval_s (subst var (get_expr vd) ex2) (Env.empty())
    | Letrec (var, ex1, ex2) -> 
      let vd = eval_s ex1 (Env.empty()) in 
        let sub1 = subst var (Letrec (var, (get_expr vd), Var var)) (get_expr vd) in 
          eval_s (subst var sub1 ex2) (Env.empty())
    | Raise -> raise EvalException
    | Unassigned -> raise (EvalError "Unassigned variable")
    | App (p, q) -> 
        match get_expr (eval_s p (Env.empty())) with 
        | Fun (x, v) -> let vq = eval_s q (Env.empty()) in 
          eval_s (subst x (get_expr vq) v) (Env.empty())
        | _ -> raise (IllFormed "Cannot be applied ") ;;
      
  let rec eval (_exp : expr) (_env : Env.env) (lexical : bool) : Env.value = 
    match _exp with 
    | Var v -> Env.lookup _env v
    | Num n -> Env.Val (Num n)
    | Bool b -> Env.Val (Bool b)
    | Unop (unop, ex) -> 
      let v = eval ex _env lexical in 
      Env.Val (unopeval unop (get_expr v))

    | Binop (binop, ex1, ex2) -> 
      let v1 = eval ex1 _env lexical in 
      let v2 = eval ex2 _env lexical in 
      Env.Val (binopeval binop (get_expr v1) (get_expr v2))

    | Conditional (ex1, ex2, ex3) ->
      let v1 = eval ex1 _env lexical in 
      (match v1 with 
      | Env.Val (Bool true) -> eval ex2 _env lexical
      | Env.Val (Bool false) -> eval ex3 _env lexical
      | _ -> raise (IllFormed "Condition must be bool"))

    | Fun (var, ex) -> 
      if lexical then Env.Closure (Fun(var, ex), _env)
      else Env.Val (Fun (var, ex))

    | Let (var, ex1, ex2) -> 
      let vd = eval ex1 _env lexical in 
      let new_env = Env.extend _env var (ref vd) in
      eval ex2 new_env lexical

    | Letrec (var, ex1, ex2) -> 
      if lexical then 
        let vd = ref (Env.Val (Unassigned)) in 
        let new_env = Env.extend _env var vd in
        let call = ref (eval ex1 new_env lexical) in
        vd := !call;
        eval ex2 new_env lexical
      else 
        let vd = eval ex1 _env lexical in 
        let new_env = Env.extend _env var (ref vd) in
        eval ex2 new_env lexical

    | Raise -> raise EvalException
    | Unassigned -> raise (EvalError "Unassigned variable")

    | App (p, q) -> 
      if lexical then
        let vP = eval p _env lexical in 
        let vQ = eval q _env lexical in 
        (match vP with 
        | Env.Closure (Fun (x, b), closure_env) ->  
          let new_env = Env.extend closure_env x (ref vQ) in
          eval b new_env lexical
        | _ -> raise (IllFormed "Cannot apply non-funtion value"))
      else 
        let vP = eval p _env lexical in 
        let vQ = eval q _env lexical in 
        (match vP with 
        | Env.Val (Fun (x, b)) -> 
          let new_env = Env.extend _env x (ref vQ) in
          eval b new_env lexical
        | _ -> raise (IllFormed "Cannot apply non-funtion value"))
    ;;   


 (* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
    completed *) (* Since you are using the inputs, you might 
    need to match it to the name *)
    
 let eval_d (_exp : expr) (_env : Env.env) : Env.value = 
   eval _exp _env false;;
          
 (* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
    completed as (part of) your extension *)
    
 let eval_l (_exp : expr) (_env : Env.env) : Env.value =
  eval _exp _env true;;

 
 (* The EXTENDED evaluator -- if you want, you can provide your
    extension as a separate evaluator, or if it is type- and
    correctness-compatible with one of the above, you can incorporate
    your extensions within `eval_s`, `eval_d`, or `eval_l`. *)
 
 let eval_e _ =
   failwith "eval_e not implemented" ;;
   
 (* Connecting the evaluators to the external world. The REPL in
    `miniml.ml` uses a call to the single function `evaluate` defined
    here. Initially, `evaluate` is the trivial evaluator `eval_t`. But
    you can define it to use any of the other evaluators as you proceed
    to implement them. (We will directly unit test the four evaluators
    above, not the `evaluate` function, so it doesn't matter how it's
    set when you submit your solution.) *)
    
 let evaluate = eval_l;; 
